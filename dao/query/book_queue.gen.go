// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"goTest/dao/gmodel"
)

func newBookQueue(db *gorm.DB, opts ...gen.DOOption) bookQueue {
	_bookQueue := bookQueue{}

	_bookQueue.bookQueueDo.UseDB(db, opts...)
	_bookQueue.bookQueueDo.UseModel(&gmodel.BookQueue{})

	tableName := _bookQueue.bookQueueDo.TableName()
	_bookQueue.ALL = field.NewAsterisk(tableName)
	_bookQueue.ID = field.NewInt32(tableName, "id")
	_bookQueue.URL = field.NewString(tableName, "url")
	_bookQueue.RelateID = field.NewInt32(tableName, "relate_id")
	_bookQueue.Type = field.NewInt32(tableName, "type")
	_bookQueue.Status = field.NewInt32(tableName, "status")
	_bookQueue.CreatedAt = field.NewTime(tableName, "created_at")
	_bookQueue.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bookQueue.CreateTime = field.NewInt32(tableName, "create_time")

	_bookQueue.fillFieldMap()

	return _bookQueue
}

// bookQueue 预约队列任务表
type bookQueue struct {
	bookQueueDo bookQueueDo

	ALL        field.Asterisk
	ID         field.Int32
	URL        field.String // 预约url
	RelateID   field.Int32  // 关联的taskId
	Type       field.Int32  // url类型，0-默认机器，1发到群里
	Status     field.Int32  // 状态：0-待处理， 1-已处理
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	CreateTime field.Int32  // 记录生成时间戳

	fieldMap map[string]field.Expr
}

func (b bookQueue) Table(newTableName string) *bookQueue {
	b.bookQueueDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bookQueue) As(alias string) *bookQueue {
	b.bookQueueDo.DO = *(b.bookQueueDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bookQueue) updateTableName(table string) *bookQueue {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.URL = field.NewString(table, "url")
	b.RelateID = field.NewInt32(table, "relate_id")
	b.Type = field.NewInt32(table, "type")
	b.Status = field.NewInt32(table, "status")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.CreateTime = field.NewInt32(table, "create_time")

	b.fillFieldMap()

	return b
}

func (b *bookQueue) WithContext(ctx context.Context) *bookQueueDo {
	return b.bookQueueDo.WithContext(ctx)
}

func (b bookQueue) TableName() string { return b.bookQueueDo.TableName() }

func (b bookQueue) Alias() string { return b.bookQueueDo.Alias() }

func (b bookQueue) Columns(cols ...field.Expr) gen.Columns { return b.bookQueueDo.Columns(cols...) }

func (b *bookQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bookQueue) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 8)
	b.fieldMap["id"] = b.ID
	b.fieldMap["url"] = b.URL
	b.fieldMap["relate_id"] = b.RelateID
	b.fieldMap["type"] = b.Type
	b.fieldMap["status"] = b.Status
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["create_time"] = b.CreateTime
}

func (b bookQueue) clone(db *gorm.DB) bookQueue {
	b.bookQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bookQueue) replaceDB(db *gorm.DB) bookQueue {
	b.bookQueueDo.ReplaceDB(db)
	return b
}

type bookQueueDo struct{ gen.DO }

func (b bookQueueDo) Debug() *bookQueueDo {
	return b.withDO(b.DO.Debug())
}

func (b bookQueueDo) WithContext(ctx context.Context) *bookQueueDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bookQueueDo) ReadDB() *bookQueueDo {
	return b.Clauses(dbresolver.Read)
}

func (b bookQueueDo) WriteDB() *bookQueueDo {
	return b.Clauses(dbresolver.Write)
}

func (b bookQueueDo) Session(config *gorm.Session) *bookQueueDo {
	return b.withDO(b.DO.Session(config))
}

func (b bookQueueDo) Clauses(conds ...clause.Expression) *bookQueueDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bookQueueDo) Returning(value interface{}, columns ...string) *bookQueueDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bookQueueDo) Not(conds ...gen.Condition) *bookQueueDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bookQueueDo) Or(conds ...gen.Condition) *bookQueueDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bookQueueDo) Select(conds ...field.Expr) *bookQueueDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bookQueueDo) Where(conds ...gen.Condition) *bookQueueDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bookQueueDo) Order(conds ...field.Expr) *bookQueueDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bookQueueDo) Distinct(cols ...field.Expr) *bookQueueDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bookQueueDo) Omit(cols ...field.Expr) *bookQueueDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bookQueueDo) Join(table schema.Tabler, on ...field.Expr) *bookQueueDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bookQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) *bookQueueDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bookQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) *bookQueueDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bookQueueDo) Group(cols ...field.Expr) *bookQueueDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bookQueueDo) Having(conds ...gen.Condition) *bookQueueDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bookQueueDo) Limit(limit int) *bookQueueDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bookQueueDo) Offset(offset int) *bookQueueDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bookQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *bookQueueDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bookQueueDo) Unscoped() *bookQueueDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bookQueueDo) Create(values ...*gmodel.BookQueue) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bookQueueDo) CreateInBatches(values []*gmodel.BookQueue, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bookQueueDo) Save(values ...*gmodel.BookQueue) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bookQueueDo) First() (*gmodel.BookQueue, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gmodel.BookQueue), nil
	}
}

func (b bookQueueDo) Take() (*gmodel.BookQueue, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gmodel.BookQueue), nil
	}
}

func (b bookQueueDo) Last() (*gmodel.BookQueue, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gmodel.BookQueue), nil
	}
}

func (b bookQueueDo) Find() ([]*gmodel.BookQueue, error) {
	result, err := b.DO.Find()
	return result.([]*gmodel.BookQueue), err
}

func (b bookQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gmodel.BookQueue, err error) {
	buf := make([]*gmodel.BookQueue, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bookQueueDo) FindInBatches(result *[]*gmodel.BookQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bookQueueDo) Attrs(attrs ...field.AssignExpr) *bookQueueDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bookQueueDo) Assign(attrs ...field.AssignExpr) *bookQueueDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bookQueueDo) Joins(fields ...field.RelationField) *bookQueueDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bookQueueDo) Preload(fields ...field.RelationField) *bookQueueDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bookQueueDo) FirstOrInit() (*gmodel.BookQueue, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gmodel.BookQueue), nil
	}
}

func (b bookQueueDo) FirstOrCreate() (*gmodel.BookQueue, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gmodel.BookQueue), nil
	}
}

func (b bookQueueDo) FindByPage(offset int, limit int) (result []*gmodel.BookQueue, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bookQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bookQueueDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bookQueueDo) Delete(models ...*gmodel.BookQueue) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bookQueueDo) withDO(do gen.Dao) *bookQueueDo {
	b.DO = *do.(*gen.DO)
	return b
}
