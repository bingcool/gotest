// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/bingcool/gen"
	"github.com/bingcool/gen/field"

	"gorm.io/plugin/dbresolver"

	"goTest/domain/dao/entity"
)

func newTaskQueue(db *gorm.DB, opts ...gen.DOOption) taskQueue {
	_taskQueue := taskQueue{}

	_taskQueue.taskQueueDo.UseDB(db, opts...)
	_taskQueue.taskQueueDo.UseModel(&entity.TaskQueue{})

	tableName := _taskQueue.taskQueueDo.TableName()
	_taskQueue.ALL = field.NewAsterisk(tableName)
	_taskQueue.ID = field.NewInt32(tableName, "id")
	_taskQueue.URL = field.NewString(tableName, "url")
	_taskQueue.QueueCode = field.NewString(tableName, "queue_code")
	_taskQueue.Status = field.NewInt32(tableName, "status")
	_taskQueue.Status1 = field.NewInt32(tableName, "status_1")
	_taskQueue.CreatedAt = field.NewTime(tableName, "created_at")
	_taskQueue.UpdatedAt = field.NewTime(tableName, "updated_at")
	_taskQueue.CreateTime = field.NewInt32(tableName, "create_time")

	_taskQueue.fillFieldMap()

	return _taskQueue
}

// taskQueue 排队队列任务表
type taskQueue struct {
	taskQueueDo taskQueueDo

	ALL        field.Asterisk
	ID         field.Int32
	URL        field.String // 队列url
	QueueCode  field.String // 队列查询码
	Status     field.Int32  // 状态：0-待处理，1-处理中, 2-处理完成, 3-异常的(过期，关闭网页等)
	Status1    field.Int32  // 状态：0-待处理，1-处理中, 2-处理完成, 3-异常的(过期，关闭网页等)
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	CreateTime field.Int32

	fieldMap map[string]field.Expr
}

func (t taskQueue) Table(newTableName string) *taskQueue {
	t.taskQueueDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskQueue) As(alias string) *taskQueue {
	t.taskQueueDo.DO = *(t.taskQueueDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskQueue) updateTableName(table string) *taskQueue {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.URL = field.NewString(table, "url")
	t.QueueCode = field.NewString(table, "queue_code")
	t.Status = field.NewInt32(table, "status")
	t.Status1 = field.NewInt32(table, "status_1")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.CreateTime = field.NewInt32(table, "create_time")

	t.fillFieldMap()

	return t
}

func (t *taskQueue) WithContext(ctx context.Context) *taskQueueDo {
	return t.taskQueueDo.WithContext(ctx)
}

func (t taskQueue) TableName() string { return t.taskQueueDo.TableName() }

func (t taskQueue) Alias() string { return t.taskQueueDo.Alias() }

func (t taskQueue) Columns(cols ...field.Expr) gen.Columns { return t.taskQueueDo.Columns(cols...) }

func (t *taskQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskQueue) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["url"] = t.URL
	t.fieldMap["queue_code"] = t.QueueCode
	t.fieldMap["status"] = t.Status
	t.fieldMap["status_1"] = t.Status1
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["create_time"] = t.CreateTime
}

func (t taskQueue) clone(db *gorm.DB) taskQueue {
	t.taskQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskQueue) replaceDB(db *gorm.DB) taskQueue {
	t.taskQueueDo.ReplaceDB(db)
	return t
}

type taskQueueDo struct{ gen.DO }

func (t taskQueueDo) Debug() *taskQueueDo {
	return t.withDO(t.DO.Debug())
}

func (t taskQueueDo) WithContext(ctx context.Context) *taskQueueDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskQueueDo) ReadDB() *taskQueueDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskQueueDo) WriteDB() *taskQueueDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskQueueDo) Session(config *gorm.Session) *taskQueueDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskQueueDo) Clauses(conds ...clause.Expression) *taskQueueDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskQueueDo) Returning(value interface{}, columns ...string) *taskQueueDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskQueueDo) Not(conds ...gen.Condition) *taskQueueDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskQueueDo) Or(conds ...gen.Condition) *taskQueueDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskQueueDo) Select(conds ...field.Expr) *taskQueueDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskQueueDo) Where(conds ...gen.Condition) *taskQueueDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskQueueDo) Order(conds ...field.Expr) *taskQueueDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskQueueDo) Distinct(cols ...field.Expr) *taskQueueDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskQueueDo) Omit(cols ...field.Expr) *taskQueueDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskQueueDo) Join(table schema.Tabler, on ...field.Expr) *taskQueueDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskQueueDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskQueueDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskQueueDo) Group(cols ...field.Expr) *taskQueueDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskQueueDo) Having(conds ...gen.Condition) *taskQueueDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskQueueDo) Limit(limit int) *taskQueueDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskQueueDo) Offset(offset int) *taskQueueDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskQueueDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskQueueDo) Unscoped() *taskQueueDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskQueueDo) Create(values ...*entity.TaskQueue) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskQueueDo) CreateInBatches(values []*entity.TaskQueue, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskQueueDo) Save(values ...*entity.TaskQueue) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskQueueDo) First() (*entity.TaskQueue, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TaskQueue), nil
	}
}

func (t taskQueueDo) Take() (*entity.TaskQueue, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TaskQueue), nil
	}
}

func (t taskQueueDo) Last() (*entity.TaskQueue, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TaskQueue), nil
	}
}

func (t taskQueueDo) Find() ([]*entity.TaskQueue, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TaskQueue), err
}

func (t taskQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TaskQueue, err error) {
	buf := make([]*entity.TaskQueue, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskQueueDo) FindInBatches(result *[]*entity.TaskQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskQueueDo) Attrs(attrs ...field.AssignExpr) *taskQueueDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskQueueDo) Assign(attrs ...field.AssignExpr) *taskQueueDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskQueueDo) Joins(fields ...field.RelationField) *taskQueueDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskQueueDo) Preload(fields ...field.RelationField) *taskQueueDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskQueueDo) FirstOrInit() (*entity.TaskQueue, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TaskQueue), nil
	}
}

func (t taskQueueDo) FirstOrCreate() (*entity.TaskQueue, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TaskQueue), nil
	}
}

func (t taskQueueDo) FindByPage(offset int, limit int) (result []*entity.TaskQueue, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskQueueDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskQueueDo) Delete(models ...*entity.TaskQueue) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskQueueDo) withDO(do gen.Dao) *taskQueueDo {
	t.DO = *do.(*gen.DO)
	return t
}
