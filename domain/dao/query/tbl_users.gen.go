// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/bingcool/gen"
	"github.com/bingcool/gen/field"

	"gorm.io/plugin/dbresolver"

	"goTest/domain/dao/entity"
)

func newTblUser(db *gorm.DB, opts ...gen.DOOption) tblUser {
	_tblUser := tblUser{}

	_tblUser.tblUserDo.UseDB(db, opts...)
	_tblUser.tblUserDo.UseModel(&entity.TblUser{})

	tableName := _tblUser.tblUserDo.TableName()
	_tblUser.ALL = field.NewAsterisk(tableName)
	_tblUser.UserID = field.NewInt32(tableName, "user_id")
	_tblUser.UserName = field.NewString(tableName, "user_name")
	_tblUser.Sex = field.NewBool(tableName, "sex")
	_tblUser.Birthday = field.NewTime(tableName, "birthday")
	_tblUser.Phone = field.NewString(tableName, "phone")
	_tblUser.ExtandJSON = field.NewString(tableName, "extand_json")
	_tblUser.GmtCreate = field.NewTime(tableName, "gmt_create")
	_tblUser.GmtModify = field.NewTime(tableName, "gmt_modify")

	_tblUser.fillFieldMap()

	return _tblUser
}

// tblUser 用户表
type tblUser struct {
	tblUserDo tblUserDo

	ALL        field.Asterisk
	UserID     field.Int32  // 用户id
	UserName   field.String // 用户名称
	Sex        field.Bool   // 用户性别，0-男，1-女
	Birthday   field.Time   // 出生年月
	Phone      field.String // 手机号
	ExtandJSON field.String // 扩展数据
	GmtCreate  field.Time   // 创建时间
	GmtModify  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tblUser) Table(newTableName string) *tblUser {
	t.tblUserDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tblUser) As(alias string) *tblUser {
	t.tblUserDo.DO = *(t.tblUserDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tblUser) updateTableName(table string) *tblUser {
	t.ALL = field.NewAsterisk(table)
	t.UserID = field.NewInt32(table, "user_id")
	t.UserName = field.NewString(table, "user_name")
	t.Sex = field.NewBool(table, "sex")
	t.Birthday = field.NewTime(table, "birthday")
	t.Phone = field.NewString(table, "phone")
	t.ExtandJSON = field.NewString(table, "extand_json")
	t.GmtCreate = field.NewTime(table, "gmt_create")
	t.GmtModify = field.NewTime(table, "gmt_modify")

	t.fillFieldMap()

	return t
}

func (t *tblUser) WithContext(ctx context.Context) *tblUserDo { return t.tblUserDo.WithContext(ctx) }

func (t tblUser) TableName() string { return t.tblUserDo.TableName() }

func (t tblUser) Alias() string { return t.tblUserDo.Alias() }

func (t tblUser) Columns(cols ...field.Expr) gen.Columns { return t.tblUserDo.Columns(cols...) }

func (t *tblUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tblUser) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["user_name"] = t.UserName
	t.fieldMap["sex"] = t.Sex
	t.fieldMap["birthday"] = t.Birthday
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["extand_json"] = t.ExtandJSON
	t.fieldMap["gmt_create"] = t.GmtCreate
	t.fieldMap["gmt_modify"] = t.GmtModify
}

func (t tblUser) clone(db *gorm.DB) tblUser {
	t.tblUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tblUser) replaceDB(db *gorm.DB) tblUser {
	t.tblUserDo.ReplaceDB(db)
	return t
}

type tblUserDo struct{ gen.DO }

func (t tblUserDo) Debug() *tblUserDo {
	return t.withDO(t.DO.Debug())
}

func (t tblUserDo) WithContext(ctx context.Context) *tblUserDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tblUserDo) ReadDB() *tblUserDo {
	return t.Clauses(dbresolver.Read)
}

func (t tblUserDo) WriteDB() *tblUserDo {
	return t.Clauses(dbresolver.Write)
}

func (t tblUserDo) Session(config *gorm.Session) *tblUserDo {
	return t.withDO(t.DO.Session(config))
}

func (t tblUserDo) Clauses(conds ...clause.Expression) *tblUserDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tblUserDo) Returning(value interface{}, columns ...string) *tblUserDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tblUserDo) Not(conds ...gen.Condition) *tblUserDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tblUserDo) Or(conds ...gen.Condition) *tblUserDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tblUserDo) Select(conds ...field.Expr) *tblUserDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tblUserDo) Where(conds ...gen.Condition) *tblUserDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tblUserDo) Order(conds ...field.Expr) *tblUserDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tblUserDo) Distinct(cols ...field.Expr) *tblUserDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tblUserDo) Omit(cols ...field.Expr) *tblUserDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tblUserDo) Join(table schema.Tabler, on ...field.Expr) *tblUserDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tblUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tblUserDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tblUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *tblUserDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tblUserDo) Group(cols ...field.Expr) *tblUserDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tblUserDo) Having(conds ...gen.Condition) *tblUserDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tblUserDo) Limit(limit int) *tblUserDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tblUserDo) Offset(offset int) *tblUserDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tblUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tblUserDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tblUserDo) Unscoped() *tblUserDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tblUserDo) Create(values ...*entity.TblUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tblUserDo) CreateInBatches(values []*entity.TblUser, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tblUserDo) Save(values ...*entity.TblUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tblUserDo) First() (*entity.TblUser, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TblUser), nil
	}
}

func (t tblUserDo) Take() (*entity.TblUser, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TblUser), nil
	}
}

func (t tblUserDo) Last() (*entity.TblUser, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TblUser), nil
	}
}

func (t tblUserDo) Find() ([]*entity.TblUser, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TblUser), err
}

func (t tblUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TblUser, err error) {
	buf := make([]*entity.TblUser, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tblUserDo) FindInBatches(result *[]*entity.TblUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tblUserDo) Attrs(attrs ...field.AssignExpr) *tblUserDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tblUserDo) Assign(attrs ...field.AssignExpr) *tblUserDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tblUserDo) Joins(fields ...field.RelationField) *tblUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tblUserDo) Preload(fields ...field.RelationField) *tblUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tblUserDo) FirstOrInit() (*entity.TblUser, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TblUser), nil
	}
}

func (t tblUserDo) FirstOrCreate() (*entity.TblUser, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TblUser), nil
	}
}

func (t tblUserDo) FindByPage(offset int, limit int) (result []*entity.TblUser, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tblUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tblUserDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tblUserDo) Delete(models ...*entity.TblUser) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tblUserDo) withDO(do gen.Dao) *tblUserDo {
	t.DO = *do.(*gen.DO)
	return t
}
