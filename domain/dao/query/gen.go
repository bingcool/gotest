// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"github.com/bingcool/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:         db,
		Bank:       newBank(db, opts...),
		BookQueue:  newBookQueue(db, opts...),
		CreditCard: newCreditCard(db, opts...),
		Customer:   newCustomer(db, opts...),
		Person:     newPerson(db, opts...),
		TaskQueue:  newTaskQueue(db, opts...),
		TblOrder:   newTblOrder(db, opts...),
		TblUser:    newTblUser(db, opts...),
		User:       newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Bank       bank
	BookQueue  bookQueue
	CreditCard creditCard
	Customer   customer
	Person     person
	TaskQueue  taskQueue
	TblOrder   tblOrder
	TblUser    tblUser
	User       user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Bank:       q.Bank.clone(db),
		BookQueue:  q.BookQueue.clone(db),
		CreditCard: q.CreditCard.clone(db),
		Customer:   q.Customer.clone(db),
		Person:     q.Person.clone(db),
		TaskQueue:  q.TaskQueue.clone(db),
		TblOrder:   q.TblOrder.clone(db),
		TblUser:    q.TblUser.clone(db),
		User:       q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Bank:       q.Bank.replaceDB(db),
		BookQueue:  q.BookQueue.replaceDB(db),
		CreditCard: q.CreditCard.replaceDB(db),
		Customer:   q.Customer.replaceDB(db),
		Person:     q.Person.replaceDB(db),
		TaskQueue:  q.TaskQueue.replaceDB(db),
		TblOrder:   q.TblOrder.replaceDB(db),
		TblUser:    q.TblUser.replaceDB(db),
		User:       q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Bank       *bankDo
	BookQueue  *bookQueueDo
	CreditCard *creditCardDo
	Customer   *customerDo
	Person     *personDo
	TaskQueue  *taskQueueDo
	TblOrder   *tblOrderDo
	TblUser    *tblUserDo
	User       *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Bank:       q.Bank.WithContext(ctx),
		BookQueue:  q.BookQueue.WithContext(ctx),
		CreditCard: q.CreditCard.WithContext(ctx),
		Customer:   q.Customer.WithContext(ctx),
		Person:     q.Person.WithContext(ctx),
		TaskQueue:  q.TaskQueue.WithContext(ctx),
		TblOrder:   q.TblOrder.WithContext(ctx),
		TblUser:    q.TblUser.WithContext(ctx),
		User:       q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
