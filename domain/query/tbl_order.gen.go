// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"goTest/domain/model"
)

func newTblOrder(db *gorm.DB, opts ...gen.DOOption) tblOrder {
	_tblOrder := tblOrder{}

	_tblOrder.tblOrderDo.UseDB(db, opts...)
	_tblOrder.tblOrderDo.UseModel(&model.TblOrder{})

	tableName := _tblOrder.tblOrderDo.TableName()
	_tblOrder.ALL = field.NewAsterisk(tableName)
	_tblOrder.OrderID = field.NewInt64(tableName, "order_id")
	_tblOrder.UserID = field.NewInt32(tableName, "user_id")
	_tblOrder.ReceiverUserName = field.NewString(tableName, "receiver_user_name")
	_tblOrder.ReceiverUserPhone = field.NewString(tableName, "receiver_user_phone")
	_tblOrder.OrderAmount = field.NewFloat64(tableName, "order_amount")
	_tblOrder.OrderProductIds = field.NewString(tableName, "order_product_ids")
	_tblOrder.OrderStatus = field.NewInt32(tableName, "order_status")
	_tblOrder.Address = field.NewString(tableName, "address")
	_tblOrder.Remark = field.NewString(tableName, "remark")
	_tblOrder.ExpendData = field.NewString(tableName, "expend_data")
	_tblOrder.JSONData = field.NewString(tableName, "json_data")
	_tblOrder.GmtCreate = field.NewTime(tableName, "gmt_create")
	_tblOrder.GmtModify = field.NewTime(tableName, "gmt_modify")
	_tblOrder.DeletedAt = field.NewField(tableName, "deleted_at")

	_tblOrder.fillFieldMap()

	return _tblOrder
}

// tblOrder 订单表
type tblOrder struct {
	tblOrderDo tblOrderDo

	ALL               field.Asterisk
	OrderID           field.Int64   // 订单id
	UserID            field.Int32   // 下单用户id
	ReceiverUserName  field.String  // 收货人
	ReceiverUserPhone field.String  // 收货人手机号
	OrderAmount       field.Float64 // 订单金额
	OrderProductIds   field.String  // 订单产品id
	OrderStatus       field.Int32   // 订单状态
	Address           field.String  // 物流地址
	Remark            field.String  // 评论
	ExpendData        field.String  // 数据
	JSONData          field.String  // 扩展数据
	GmtCreate         field.Time    // 创建时间
	GmtModify         field.Time    // 更新时间
	DeletedAt         field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (t tblOrder) Table(newTableName string) *tblOrder {
	t.tblOrderDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tblOrder) As(alias string) *tblOrder {
	t.tblOrderDo.DO = *(t.tblOrderDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tblOrder) updateTableName(table string) *tblOrder {
	t.ALL = field.NewAsterisk(table)
	t.OrderID = field.NewInt64(table, "order_id")
	t.UserID = field.NewInt32(table, "user_id")
	t.ReceiverUserName = field.NewString(table, "receiver_user_name")
	t.ReceiverUserPhone = field.NewString(table, "receiver_user_phone")
	t.OrderAmount = field.NewFloat64(table, "order_amount")
	t.OrderProductIds = field.NewString(table, "order_product_ids")
	t.OrderStatus = field.NewInt32(table, "order_status")
	t.Address = field.NewString(table, "address")
	t.Remark = field.NewString(table, "remark")
	t.ExpendData = field.NewString(table, "expend_data")
	t.JSONData = field.NewString(table, "json_data")
	t.GmtCreate = field.NewTime(table, "gmt_create")
	t.GmtModify = field.NewTime(table, "gmt_modify")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tblOrder) WithContext(ctx context.Context) *tblOrderDo { return t.tblOrderDo.WithContext(ctx) }

func (t tblOrder) TableName() string { return t.tblOrderDo.TableName() }

func (t tblOrder) Alias() string { return t.tblOrderDo.Alias() }

func (t tblOrder) Columns(cols ...field.Expr) gen.Columns { return t.tblOrderDo.Columns(cols...) }

func (t *tblOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tblOrder) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["order_id"] = t.OrderID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["receiver_user_name"] = t.ReceiverUserName
	t.fieldMap["receiver_user_phone"] = t.ReceiverUserPhone
	t.fieldMap["order_amount"] = t.OrderAmount
	t.fieldMap["order_product_ids"] = t.OrderProductIds
	t.fieldMap["order_status"] = t.OrderStatus
	t.fieldMap["address"] = t.Address
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["expend_data"] = t.ExpendData
	t.fieldMap["json_data"] = t.JSONData
	t.fieldMap["gmt_create"] = t.GmtCreate
	t.fieldMap["gmt_modify"] = t.GmtModify
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tblOrder) clone(db *gorm.DB) tblOrder {
	t.tblOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tblOrder) replaceDB(db *gorm.DB) tblOrder {
	t.tblOrderDo.ReplaceDB(db)
	return t
}

type tblOrderDo struct{ gen.DO }

func (t tblOrderDo) Debug() *tblOrderDo {
	return t.withDO(t.DO.Debug())
}

func (t tblOrderDo) WithContext(ctx context.Context) *tblOrderDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tblOrderDo) ReadDB() *tblOrderDo {
	return t.Clauses(dbresolver.Read)
}

func (t tblOrderDo) WriteDB() *tblOrderDo {
	return t.Clauses(dbresolver.Write)
}

func (t tblOrderDo) Session(config *gorm.Session) *tblOrderDo {
	return t.withDO(t.DO.Session(config))
}

func (t tblOrderDo) Clauses(conds ...clause.Expression) *tblOrderDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tblOrderDo) Returning(value interface{}, columns ...string) *tblOrderDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tblOrderDo) Not(conds ...gen.Condition) *tblOrderDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tblOrderDo) Or(conds ...gen.Condition) *tblOrderDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tblOrderDo) Select(conds ...field.Expr) *tblOrderDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tblOrderDo) Where(conds ...gen.Condition) *tblOrderDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tblOrderDo) Order(conds ...field.Expr) *tblOrderDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tblOrderDo) Distinct(cols ...field.Expr) *tblOrderDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tblOrderDo) Omit(cols ...field.Expr) *tblOrderDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tblOrderDo) Join(table schema.Tabler, on ...field.Expr) *tblOrderDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tblOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tblOrderDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tblOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) *tblOrderDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tblOrderDo) Group(cols ...field.Expr) *tblOrderDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tblOrderDo) Having(conds ...gen.Condition) *tblOrderDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tblOrderDo) Limit(limit int) *tblOrderDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tblOrderDo) Offset(offset int) *tblOrderDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tblOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tblOrderDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tblOrderDo) Unscoped() *tblOrderDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tblOrderDo) Create(values ...*model.TblOrder) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tblOrderDo) CreateInBatches(values []*model.TblOrder, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tblOrderDo) Save(values ...*model.TblOrder) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tblOrderDo) First() (*model.TblOrder, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblOrder), nil
	}
}

func (t tblOrderDo) Take() (*model.TblOrder, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblOrder), nil
	}
}

func (t tblOrderDo) Last() (*model.TblOrder, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblOrder), nil
	}
}

func (t tblOrderDo) Find() ([]*model.TblOrder, error) {
	result, err := t.DO.Find()
	return result.([]*model.TblOrder), err
}

func (t tblOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TblOrder, err error) {
	buf := make([]*model.TblOrder, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tblOrderDo) FindInBatches(result *[]*model.TblOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tblOrderDo) Attrs(attrs ...field.AssignExpr) *tblOrderDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tblOrderDo) Assign(attrs ...field.AssignExpr) *tblOrderDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tblOrderDo) Joins(fields ...field.RelationField) *tblOrderDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tblOrderDo) Preload(fields ...field.RelationField) *tblOrderDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tblOrderDo) FirstOrInit() (*model.TblOrder, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblOrder), nil
	}
}

func (t tblOrderDo) FirstOrCreate() (*model.TblOrder, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblOrder), nil
	}
}

func (t tblOrderDo) FindByPage(offset int, limit int) (result []*model.TblOrder, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tblOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tblOrderDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tblOrderDo) Delete(models ...*model.TblOrder) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tblOrderDo) withDO(do gen.Dao) *tblOrderDo {
	t.DO = *do.(*gen.DO)
	return t
}
